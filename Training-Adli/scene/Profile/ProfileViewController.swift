//
//  ProfileViewController.swift
//  Training-Adli
//
//  Created by Adli Raihan on 02/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyUserDefaults
import WebKit

protocol ProfileDisplayLogic: class
{
    func displayToProfile(viewModel : Profile.privateProfile.viewModel)
}

enum profileViewer {
    case _self
    case _other
    case _mod
    case _friends
    case _fromdashboard
}

class ProfileViewController: UIViewController, ProfileDisplayLogic
{
    // Outlets
    @IBOutlet weak var openSideMenuButton: UIButton! {
        didSet {
            let image = UIImage.init(named: "ic_menu")?.withRenderingMode(.alwaysTemplate)
            openSideMenuButton.tintColor = UIColor.white
            openSideMenuButton.setImage(image, for: .normal)
            openSideMenuButton.setTitle("", for: .normal)
        }
    }
    @IBOutlet weak var topConstraintProfileSection: NSLayoutConstraint!
    @IBOutlet weak var profileSectionViewHolder: UIView!
    @IBOutlet weak var imageProfile: UIImageView! {
        didSet{
            imageProfile.circleRadius()
            imageProfile.clipsToBounds = true
        }
    }
    
    @IBOutlet weak var leftSideMenuConstraint: NSLayoutConstraint!
    @IBOutlet weak var leftSideMenuButtonConstraintRight: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var scrollViewContentHeights: NSLayoutConstraint!
    @IBOutlet weak var scrollViewInsideContent : UIView!
    @IBOutlet weak var tableViewProfileContent: tableViewProfileContent!
    
    @IBOutlet weak var followInContentButton: UIButton!
    @IBOutlet weak var usernameInContentLabel: UILabel!
    
    
    @IBOutlet weak var imageCollectionPrimary : UIImageView!
    @IBOutlet weak var imageCollectionSecondaryOne : UIImageView!
    @IBOutlet weak var imageCollectionSecondaryTwo : UIImageView!
    @IBOutlet weak var imageCollectionViewHolder : UIView! {
        didSet {
            imageCollectionViewHolder.constantRadius()
            imageCollectionViewHolder.setShadow()
        }
    }
    @IBOutlet weak var menuSideHideGestureView : UIView!
    @IBOutlet weak var menuSideButtonAction: UIImageView!
    @IBOutlet weak var menuSidePositionLeft: NSLayoutConstraint!
    @IBOutlet weak var menuSide: UIView!
    @IBOutlet weak var menuSideLogout: UIButton!
    
    @IBOutlet weak var usernameProfile: UILabel!
    @IBOutlet weak var followersCountProfile: UILabel!
    @IBOutlet weak var collectionsCountProfile: UILabel!
    
    @IBOutlet weak var newProfileHolder: UIView!
    
    
    // List Object
    lazy var contentCell : [ UITableViewCell ] = [CollectionTableViewCell()]
    var isMenuOpen = false
    var interactor: ProfileBusinessLogic?
    var router: (NSObjectProtocol & ProfileRoutingLogic & ProfileDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setu
    
    private func setup()
    {
        let viewController = self
        let interactor = ProfileInteractor()
        let presenter = ProfilePresenter()
        let router = ProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        newSetupUI()
        newSetupIO()
        attachProfileContent()
//        setupUI()
//        setupIO()
//        do_getProfile()
    }
    
    private func newSetupUI () {
        self.newProfileHolder.setShadow()
        self.scrollViewContentHeights.constant = self.scrollViewContentHeights.constant + 300.0
        self.scrollView.delegate = self
        self.scrollView.bounces  = false
        self.leftSideMenuConstraint.constant = -UIScreen.main.bounds.width
    }
    
    private func newSetupIO () {
        
        
    }
    
    private func attachProfileContent () {
        self.tableViewProfileContent.initializeData(parent: self)
        self.tableViewProfileContent.isScrollEnabled = false
        self.tableViewProfileContent.bounces = false
    }
    
    private func setupUI() {
        menuSidePositionLeft.constant = -menuSide.frame.width
        menuSideHideGestureView.isHidden = true
    }
    
    private func setupIO() {
        menuSideButtonAction.isUserInteractionEnabled = true
        menuSideButtonAction.addGestureRecognizer(UITapGestureRecognizer.init(target: self, action: #selector(showSideBarMenu)))
        menuSideHideGestureView.isUserInteractionEnabled = true
        menuSideHideGestureView.addGestureRecognizer(UITapGestureRecognizer.init(target: self, action: #selector(hideSideBarMenu)))
    }
    
    private func do_getProfile() {
        interactor?.getProfile()
    }
    
    
    
    @objc private func showSideBarMenu () {
        menuSidePositionLeft.constant = 0
        UIView.animate(withDuration: 0.25) {
            self.view.layoutIfNeeded()
            self.menuSideHideGestureView.isHidden = false
        }
    }
    
    @objc private func hideSideBarMenu () {
        "Hide".createMessage(message: "Success")
        menuSidePositionLeft.constant = -menuSide.frame.width
        UIView.animate(withDuration: 0.25) {
            self.view.layoutIfNeeded()
            self.menuSideHideGestureView.isHidden = true
        }
    }
    
    func displayToProfile(viewModel: Profile.privateProfile.viewModel) {
        self.collectionsCountProfile.text = "\(viewModel.collection ?? 0)"
        self.followersCountProfile.text = "\(viewModel.followers ?? 0)"
        self.usernameProfile.text = "@\(viewModel.username ?? "...." )"
        self.imageProfile.kf.setImage(with: URL.init(string: viewModel.imageURL ?? ""))
    }
    
    // Action button to show left side menu
    @IBAction func buttonOpenSideMenu(_ sender: Any) {
        changeButtonColor()
        self.leftSideMenuConstraint.constant = (isMenuOpen) ? -UIScreen.main.bounds.width : 0
        self.leftSideMenuButtonConstraintRight.constant = (isMenuOpen) ? 25 : UIScreen.main.bounds.width - 50
        self.isMenuOpen = !isMenuOpen
        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 5, initialSpringVelocity: 10, options: .curveEaseInOut, animations: {
            self.view.layoutIfNeeded()
        }) {
            (finish) in
            self.scrollView.isScrollEnabled = !self.isMenuOpen
        }
    }
    
    // methods for change button tint Color
    private func changeButtonColor () {
        self.openSideMenuButton.tintColor = (isMenuOpen) ? UIColor.white : UIColor.black
    }
    
    // MARK: Do something
    @IBAction func buttonLogoutAction(_ sender: Any) {
        Defaults[.userAuthenticationCode] = ""
        WKWebView().clearCache()
        self.router?.routeToLogout()
    }
    
}

extension ProfileViewController  {
    
    // Button Action
    
}

extension ProfileViewController : UIScrollViewDelegate {
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let yOffset = scrollView.contentOffset.y
        // I dont even know what this is
        guard yOffset > 0 else { return }
        guard scrollView == self.scrollView else { return }
        
        tableViewProfileContent.isScrollEnabled = false
        topConstraintProfileSection.constant = (yOffset / 20)
        profileSectionViewHolder.alpha = 1 - (yOffset / 300)
        
        // Content Switcher
        if yOffset > 25 {
            self.scrollViewInsideContent.setShadow(Opacity: 0.05)
        } else {
            self.scrollViewInsideContent.setShadow(withColor: UIColor.white, Opacity: 0)
        }
        
        // Show Or Hide Username & Follow
        if yOffset > 290 {
            tableViewProfileContent.isScrollEnabled = true
            _showOrHideUsernameAndFollow()
        } else {
            _showOrHideUsernameAndFollow(hide: true)
        }
        
    }
    
    private func _showOrHideUsernameAndFollow (hide : Bool = false) {
        let alpha : CGFloat = (hide) ? 0 : 1
        UIView.animate(withDuration: 0.25) {
            self.usernameInContentLabel.alpha = alpha
        }
    }
    
    
    
}
