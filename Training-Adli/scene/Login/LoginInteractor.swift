//
//  LoginInteractor.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

protocol LoginBusinessLogic
{
    func interactorParsingCode (CreateAuth Code : String)
}

protocol LoginDataStore
{
    //var name: String { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?

    func interactorParsingCode(CreateAuth Code: String) {
        let _unsplash = unsplash.oauthTokenModel.tokenRequest.init()
        _unsplash.clientId = ConstantVariables.clientId
        _unsplash.secretKey = ConstantVariables.secretKey
        _unsplash.redirectUrl = ConstantVariables.redirectUrl
        _unsplash.scope = ConstantVariables.scope
        _unsplash.code = Code
        
        LoginWorker.init().createAccessToken(request: _unsplash) { (response) in
            switch response {
            case .success(let data):
                do {
                    let map = Mapper<unsplash.oauthTokenModel.tokenResponse>().map(JSON: try data.mapJSON() as! [String:Any])
                    
                    if map == nil {
                        self.presenter?.presentAuthenticationFailed(message: "Failed from front-end.")
                    } else {
                        "Response Success".createMessage(message: map!.toJSONString(prettyPrint: true)!)
                        self.presenter?.presentCodeAuthenticationBearer(response: map!)
                    }
                } catch (let error) {
                    self.presenter?.presentAuthenticationFailed(message: error.localizedDescription)
                }
                break
            case .error(let error):
                self.presenter?.presentAuthenticationFailed(message: error)
                break
            }
        }
    }
}

