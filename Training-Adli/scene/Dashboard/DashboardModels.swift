//
//  DashboardModels.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

enum Dashboard
{
    // MARK: Use cases
    enum getPhotos {
        
        struct viewModel {
            var responsePrimary : [Dashboard.getPhotos.response]?
            var modelImages : [String]?
        }
        
        struct tableViewModel {
            var modelImages : [String] = []
            var descriptionsImage : [String] = []
        }
        
        static func createParam (request : request) -> [String:Any] {
            "to JSON".createMessage(message: request.toJSON())
            return request.toJSON()
        }
        
        class request : Mappable {
            
            var page : String?
            var perPage : String?
            var orderBy : String?
            
            init () {}
            required init?(map: Map) {}
            
            func mapping(map: Map) {
                page <- map["page"]
                perPage <- map["per_page"]
                orderBy <- map["order_by"]
            }
        }
        
        class response : Mappable {
            var id : String?
            var createdAt : String?
            var updatedAt : String?
            var width : String?
            var height : String?
            var color : String?
            var likes : Int?
            var liked_by_user : Bool?
            var description : String?
            var link : responseLinks?
            var urls : responseUrls?
            
            init () {}
            required init?(map: Map) {}
            func mapping(map: Map) {
                id <- map["id"]
                createdAt <- map["created_at"]
                likes <- map["likes"]
                link <- map["links"]
                urls <- map["urls"]
            }
        }
        
        class responseLinks : Mappable {
            var _download : String?
            var _downloadLocation : String?
            var _html : String?
            var _self : String?
            
            init () {}
            required init?(map: Map) {}
            func mapping(map: Map) {
                _download <- map["download"]
                _downloadLocation <- map["download_location"]
                _html <- map["html"]
                _self <- map["self"]
            }
        }
        
        class responseUrls : Mappable {
            var _full : String?
            var _raw : String?
            var _regular : String?
            var _small : String?
            var _thumb : String?
            
            init () {}
            required init?(map: Map) {}
            func mapping(map: Map) {
                _full <- map["full"]
                _raw <- map["raw"]
                _regular <- map["regular"]
                _small <- map["small"]
                _thumb <- map["thumb"]
            }
        }
    }
}

