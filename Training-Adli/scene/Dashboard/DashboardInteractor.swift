//
//  DashboardInteractor.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper
import Moya

protocol DashboardBusinessLogic
{
    func getAllPhotos()
    func setLikedPhoto(_id : String)
}

protocol DashboardDataStore
{
    //var name: String { get set }
}

class DashboardInteractor: DashboardBusinessLogic, DashboardDataStore
{
    
    var presenter: DashboardPresentationLogic?
    var worker: DashboardWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func getAllPhotos() {
        let request = Dashboard.getPhotos.request.init()
        request.orderBy = ""
        request.page = ""
        request.perPage = ""
        DashboardWorker().getAllPhotos(request: request) { (result) in
            switch result {
            case .success(let data):
                do {
                    " Message Response ".createMessage(message: try data.mapString())
                    let mapArray : [NSDictionary] = try data.mapArrayJSON() as! [NSDictionary]
                    var mapResult : [Dashboard.getPhotos.response] = []
                    guard mapArray.count > 0 else { return }
                    " Actual Response ".createMessage(message: mapArray)
                    for ValueArray in mapArray {
                        if let valueNested = ValueArray as? [String:Any] {
                            mapResult.append(Mapper<Dashboard.getPhotos.response>().map(JSON: valueNested)!)
                        }
                    }
                    self.presenter?.presentToShowPhotos(response: mapResult)
                } catch (let error ) {
                    self.presenter?.presentToFailed(message: error.localizedDescription)
                }
                break
            case .error(let error):
                self.presenter?.presentToFailed(message: error)
                break
            }
        }
    }
    
    func setLikedPhoto(_id : String) {
        "Liked Photos Task".createMessage(message: "Successfully!")
        let request = Dashboard.likePhotos.request()
        request.id = _id
        DashboardWorker.init().setLikePhotos(request: request) { (result) in
            switch result {
            case .success(let data):
                do {
                    "Message".createMessage(message: try data.mapString())
                } catch (let error) {
                    self.presenter?.presentToFailed(message: error.localizedDescription)
                }
                break
            case .error(let error):
                self.presenter?.presentToFailed(message: error)
                break
            }
        }
    }
}

