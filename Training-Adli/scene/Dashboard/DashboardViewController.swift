//
//  DashboardViewController.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardDisplayLogic: class
{
    func displayToShowPhotos(_response : Dashboard.getPhotos.viewModel)
    func displayError (message : String)
}

class DashboardViewController: BaseViewController, DashboardDisplayLogic
{
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imageHolderDashboard: UIImageView!
    @IBOutlet weak var viewConstraintValue: NSLayoutConstraint!
    
    private var dsTableView = Dashboard.getPhotos.tableViewModel.init()
    var interactor: DashboardBusinessLogic?
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DashboardInteractor()
        let presenter = DashboardPresenter()
        let router = DashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupUI()
        setupInteractor()
    }
    
    private func setupUI(){
        setupTextField()
        setupTableView()
    }
    
    private func setupTextField () {
        let viewImage = UIView.init(frame: CGRect(x: 0, y: 0, width: 30, height: 20))
        let imgView = UIImageView.init(frame: CGRect(x: 10, y: 0, width: 20, height: 20))
        let image = UIImage.init(named: "ic_search")!.withRenderingMode(.alwaysTemplate)
        imgView.tintColor = UIColor.gray
        imgView.image = image
        
        viewImage.addSubview(imgView)
        self.searchTextField.leftViewMode = .always
        self.searchTextField.leftView = viewImage
    }
    
    private func setupTableView () {
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    private func setupInteractor () {
        self.showLoading("")
        "Token Access".createMessage(message: ConstantVariables.accessToken)
        interactor?.getAllPhotos()
    }
    
    func displayToShowPhotos(_response: Dashboard.getPhotos.viewModel) {
        "URL".createMessage(message: _response.responsePrimary![1].urls!._regular!)
        imageHolderDashboard.kf.setImage(with: URL.init(string: _response.responsePrimary![1].urls!._regular ?? ""))
        
        for dataResponse in _response.responsePrimary! {
            self.dsTableView.modelImages.append(dataResponse.urls!._regular!)
            self.dsTableView.descriptionsImage.append(dataResponse.description ?? "No Description" )
            self.dsTableView.username.append(dataResponse.user!.username!)
            self.dsTableView.usernameImage.append(dataResponse.user!.profileImage!._small!)
            self.dsTableView.idsPhoto.append(dataResponse.id!)
            self.dsTableView.likedByUser.append(dataResponse.liked_by_user!)
        }
        
        self.tableView.reloadData()
    }
    
    func displayError(message: String) {
        self.showAlert(_message: message)
    }
    
}

extension DashboardViewController : UITableViewDelegate , UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.dsTableView.modelImages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        self.hideLoading("")
        let nib = UINib.init(nibName: "DashboardImageTableViewCell", bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: "imageCell")
        let cell = tableView.dequeueReusableCell(withIdentifier: "imageCell") as? DashboardImageTableViewCell
        return initializeCell(cell ?? UITableViewCell(), row: indexPath.row)
    }
    
    private func initializeCell (_ cell : UITableViewCell , row : Int) -> UITableViewCell {
        if let _cell = cell as? DashboardImageTableViewCell {
            _cell.imageCell.kf.setImage(with: URL.init(string: self.dsTableView.modelImages[row])!)
            _cell.usernameLabel.text = self.dsTableView.username[row]
            _cell.imageProfileCell.kf.setImage(with: URL.init(string: self.dsTableView.usernameImage[row])!)
            _cell.descriptionLabel.text = self.dsTableView.descriptionsImage[row]
            // Initialze Data
            _cell.datastore.id = self.dsTableView.idsPhoto[row]
            _cell.datastore.isLikedByUser = self.dsTableView.likedByUser[row]
            
            if self.dsTableView.likedByUser[row] == 1 {
                _cell.likedByUser()
            } else {
                _cell.unlikedByUser()
            }
            
            _cell.idDelegate = self
            return _cell
        }
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        self.viewConstraintValue.constant = CGFloat(500 * self.dsTableView.modelImages.count) - UIScreen.main.bounds.height / 1.65
        return 500.0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        if let _cell = cell as? DashboardImageTableViewCell {
//            "Cell Selected".createMessage(message: _cell.datastore.id!)
        }
    }
}

extension DashboardViewController : dashboardCellImageDelegate {
    func _didLike(id: String) {
//        "Image Loved at ID".createMessage(message: id)
        _createAddQueueTasks(id)
    }
    
    private func _createAddQueueTasks (_ ids : String) {
        DispatchQueue.global(qos: .background).async {
            let queued = DispatchQueue.init(label: "REQUEST_FOR_LIKED_PHOTOS_TEST:DEV - ADLI")
            queued.async {
                "From : \(queued.label)".createMessage(message: ids)
                self.interactor?.setLikedPhoto(_id: ids)
            }
        }
    }
}

