//
//  DashboardViewController.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyUserDefaults
import Kingfisher
import UserNotifications

protocol DashboardDisplayLogic: class
{
    func displayToShowOfflinePhotos (viewModel : [DashboardImages])
    func displayToShowPhotos(_response : Dashboard.getPhotos.viewModel)
    func displayError (message : String)
}

class DashboardViewController: BaseViewController, DashboardDisplayLogic
{
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imageHolderDashboard: UIImageView!
    @IBOutlet weak var viewConstraintValue: NSLayoutConstraint!
    @IBOutlet weak var activityLoadBottom : UIActivityIndicatorView!
    var cell : DashboardImageTableViewCell!
    
    private var demandRequest = Dashboard.getPhotos.request()
    private var dsTableView = Dashboard.getPhotos.tableViewModel.init()
    private var dsIsRefreshed = false
    private var dsIsExpanded = false
    var interactor: DashboardBusinessLogic?
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DashboardInteractor()
        let presenter = DashboardPresenter()
        let router = DashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        
        super.viewDidLoad()
        
        DispatchQueue.global(qos: .background).async {
            DispatchQueue.main.async {
                self.setupObserver()
                self.setupFirstLoad()
                self.setupUI()
                self.displayOfflineImages()
                self.setupInteractor()
                self.notificationMatters()
            }
        }
        
    }
    
    private func displayOfflineImages () {
        self.interactor?.getOfflinePhotos()
    }
    
    private func setupUI(){
        
        setupTextField()
        setupTableView()
        setupNavigation()
        
    }
    
    private func setupFirstLoad() {
        let nib = UINib.init(nibName: "DashboardImageTableViewCell", bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: "imageCell")
        self.demandRequest.perPage = "50"
        self.demandRequest.orderBy = "1"
        self.demandRequest.page = "1"
    }
    
    private func setupObserver() {
        self.addObserver(self, forKeyPath: "contentSize", options: .new, context: nil)
    }
    
    private func dismissObserver () {
        self.removeObserver(self, forKeyPath: "contentSize")
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "contentSize" {
            if let newValue = change?[.newKey] {
                let newSize = newValue as? CGSize
            }
        }
    }
    
    private func setupNavigation() {
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        imageHolderDashboard.kf.setImage(with: URL.init(string: Defaults[.appDefaultImageHeader]))
    }
    
    private func setupTextField () {
        let viewImage = UIView.init(frame: CGRect(x: 0, y: 0, width: 30, height: 20))
        let imgView = UIImageView.init(frame: CGRect(x: 10, y: 0, width: 20, height: 20))
        let image = UIImage.init(named: "ic_search")!.withRenderingMode(.alwaysTemplate)
        imgView.tintColor = UIColor.gray
        imgView.image = image
        
        viewImage.addSubview(imgView)
        self.searchTextField.leftViewMode = .always
        self.searchTextField.leftView = viewImage
    }
    
    private func setupTableView () {
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    private func setupInteractor () {
        "Token Access".createMessage(message: ConstantVariables.accessToken)
        NotificationCenter.default.post(name: NSNotification.Name(rawValue: NSNotification.Name.contentConnection), object: nil, userInfo: nil)
        interactor?.getAllPhotos(request: demandRequest)
    }
    
    private func resetDataStore () {
        self.dsTableView.modelImages.removeAll()
        self.dsTableView.descriptionsImage.removeAll()
        self.dsTableView.username.removeAll()
        self.dsTableView.usernameImage.removeAll()
        self.dsTableView.idsPhoto.removeAll()
        self.dsTableView.likedByUser.removeAll()
    }
    
    // Protocol Area
    func displayToShowOfflinePhotos(viewModel: [DashboardImages]) {
        
        "Offline Photos".createMessage(message: "Through this ")
        
        for dataResponse in viewModel {
            self.dsTableView.username.append(dataResponse.username)
            self.dsTableView.modelImages.append(dataResponse.image)
            self.dsTableView.likedByUser.append(Int(dataResponse.liked) ?? 0)
            self.dsTableView.idsPhoto.append(dataResponse.id)
            self.dsTableView.usernameImage.append("")
            self.dsTableView.descriptionsImage.append("No Description" )
        }
        
        self.tableView.reloadData()
    }
    
    func displayToShowPhotos(_response: Dashboard.getPhotos.viewModel) {
        guard _response.responsePrimary != nil else { return }
        guard _response.responsePrimary!.count > 0 else { return }
        let urlImage : String = _response.responsePrimary!.last!.urls!._regular ?? ""
        imageHolderDashboard.kf.setImage(with: URL.init(string: urlImage))
        Defaults[.appDefaultImageHeader] = urlImage
        
        for dataResponse in _response.responsePrimary! {
            self.dsTableView.modelImages.append(dataResponse.urls!._regular!)
            self.dsTableView.descriptionsImage.append(dataResponse.description ?? "No Description" )
            self.dsTableView.username.append(dataResponse.user!.username!)
            self.dsTableView.usernameImage.append(dataResponse.user!.profileImage!._small!)
            self.dsTableView.idsPhoto.append(dataResponse.id!)
            self.dsTableView.likedByUser.append(dataResponse.liked_by_user!)
        }
        
        
        self.interactor?.saveAllPhotos(data: dsTableView)
        self.tableView.reloadData()
    }
    
    func displayError(message: String) {
        self.showAlert(_message: message)
    }
    
    
    
    private func notificationMatters () {
        let notificationCenter = UNUserNotificationCenter.current()
        
        notificationCenter.getNotificationSettings { (settings) in
            if settings.authorizationStatus != .authorized {
                print("Not Granted!")
            } else {
                "Notification".createMessage(message: "Notification Granted!")
                self.buildNotifications(notificationCenter: notificationCenter)
            }
        }
    }
    
    private func buildNotifications (notificationCenter : UNUserNotificationCenter) {
        NotificationCenter.default.addObserver(self, selector: #selector(setToOnline), name: NSNotification.Name(rawValue: NSNotification.Name.contentConnection) , object: nil)
    }
    
    @objc private func testNotificationCenter () {
        "Test".createMessage(message: "HELLO !!!!")
        let notificationCenter = UNUserNotificationCenter.current()
        
        let content = UNMutableNotificationContent()
        content.title = "Test Notifications"
        content.body = "Testing !"
        content.badge = 1
        
        let trigger = UNTimeIntervalNotificationTrigger.init(timeInterval: 3, repeats: false)
        let identifier = "Local Notifications"
        let request = UNNotificationRequest.init(identifier: identifier, content: content, trigger: trigger)
        
        notificationCenter.add(request) { (error) in
            guard error == nil else { return }
            
        }
    }
    
    @objc private func setToOnline () {
        self.resetDataStore()
    }
    
    
    override func viewWillDisappear(_ animated: Bool) {
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: NSNotification.Name.contentConnection), object: nil)
    }
    
    
}

extension DashboardViewController : UITableViewDelegate , UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.dsTableView.modelImages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        self.dsIsRefreshed = false
        self.dsIsExpanded = false
        
        self.cell = (tableView.dequeueReusableCell(withIdentifier: "imageCell") as! DashboardImageTableViewCell)
        
        initializeCell(cell ?? UITableViewCell(), row: indexPath.row) { (_cell) in
            self.cell = _cell as? DashboardImageTableViewCell
        }
        
        return cell
    }
    
    private func initializeCell (_ cell : UITableViewCell , row : Int , completion : @escaping (UITableViewCell) -> Void) {
        DispatchQueue.global(qos: .background).async {
            DispatchQueue.main.async {
                if let _cell = cell as? DashboardImageTableViewCell , row < (self.dsTableView.username.count - 1)  {
                    self.setImage(imageView: _cell.imageCell, row: row)
                    _cell.usernameLabel.text = self.dsTableView.username[row]
                    
                    _cell.descriptionLabel.text = self.dsTableView.descriptionsImage[row]
                    // Initialze Data
                    _cell.datastore.id = self.dsTableView.idsPhoto[row]
                    _cell.datastore.isLikedByUser = self.dsTableView.likedByUser[row]
                    
                    if !self.dsTableView.usernameImage[row].isEmpty {
                        _cell.imageProfileCell.kf.setImage(with: URL.init(string: self.dsTableView.usernameImage[row])!)
                    }
                    
                    if self.dsTableView.likedByUser[row] == 1 {
                        _cell.likedByUser()
                    } else {
                        _cell.unlikedByUser()
                    }
                    
                    _cell.idDelegate = self
                    completion(_cell)
                }
            }
        }
//        return cell
    }
    
    private func setImage(imageView : UIImageView,row : Int) {
        if row > self.dsTableView.modelImages.count - 1 {
            return
        }
        let url = URL.init(string: self.dsTableView.modelImages[row])
        imageView.kf.indicatorType = .activity
        imageView.kf.setImage(with: url!, placeholder: nil, options: [.backgroundDecode], progressBlock: nil, completionHandler: nil)
        
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        self.viewConstraintValue.constant = CGFloat((500 * self.dsTableView.descriptionsImage.count)) - (UIScreen.main.bounds.height - 210)
        return 500.0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        if let _cell = cell as? DashboardImageTableViewCell {
//            "Cell Selected".createMessage(message: _cell.datastore.id!)
        }
    }
    
    
}

extension DashboardViewController : dashboardCellImageDelegate {
    func _didLike(id: String) {
        _createAddQueueTasks(id)
    }
    
    func _didUnlike(id: String) {
        __createAddQueueTasks(id)
    }
    
    private func _createAddQueueTasks (_ ids : String) {
        DispatchQueue.global(qos: .background).async {
            let queued = DispatchQueue.init(label: "REQUEST_FOR_LIKED_PHOTOS_TEST:DEV - ADLI")
            queued.async {
                "From : \(queued.label)".createMessage(message: ids)
                self.interactor?.setLikedPhoto(_id: ids)
            }
        }
    }
    
    private func __createAddQueueTasks (_ ids : String) {
        DispatchQueue.global(qos: .background).async {
            let queued = DispatchQueue.init(label: "REQUEST_FOR_UNLIKED_PHOTOS_TEST:DEV - ADLI")
            queued.async {
                "From : \(queued.label)".createMessage(message: ids)
                self.interactor?.setUnlikePhoto(_id: ids)
            }
        }
    }
}

extension DashboardViewController : UIScrollViewDelegate {
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let indexValue : CGFloat = scrollView.contentOffset.y
        if indexValue <= -150 && !self.dsIsRefreshed {
            self.dsIsRefreshed = true
            self.resetDataStore()
            self.interactor?.getAllPhotos(request: demandRequest)
        } else if indexValue >=  (self.viewConstraintValue.constant - 462) && !self.dsIsExpanded {
            self.dsIsExpanded = true
            self.expandDemandRequest()
            self.interactor?.getAllPhotos(request: demandRequest)
        }
    }
    
    private func expandDemandRequest () {
        if var perPage = Int(demandRequest.perPage!) {
            expandPage()
            self.demandRequest.perPage = "\(perPage)"
        }
        
        func expandOrder () {
            if var orderBy = Int(demandRequest.orderBy!) {
                orderBy += 1
                self.demandRequest.orderBy = "\(orderBy)"
            }
        }
    }
    
    
    private func expandPage () {
        if var page = Int(demandRequest.page!) {
            page += 1
            self.demandRequest.page = "\(page)"
        }
    }
    
    
    
}
