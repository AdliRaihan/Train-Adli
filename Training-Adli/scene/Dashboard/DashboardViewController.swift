//
//  DashboardViewController.swift
//  Training-Adli
//
//  Created by Stella Patricia on 03/10/19.
//  Copyright (c) 2019 Adli Raihan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardDisplayLogic: class
{
    func displayToShowPhotos(_response : Dashboard.getPhotos.viewModel)
}

class DashboardViewController: UIViewController, DashboardDisplayLogic
{
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var imageHolderDashboard: UIImageView!
    @IBOutlet weak var viewConstraintValue: NSLayoutConstraint!
    
    private var dsTableView = Dashboard.getPhotos.tableViewModel.init()
    var interactor: DashboardBusinessLogic?
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DashboardInteractor()
        let presenter = DashboardPresenter()
        let router = DashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupUI()
        setupInteractor()
    }
    
    private func setupUI(){
        setupTableView()
    }
    
    private func setupTableView () {
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.tableView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
    }
    
    private func setupInteractor () {
        interactor?.getAllPhotos()
    }
    
    func displayToShowPhotos(_response: Dashboard.getPhotos.viewModel) {
        "URL".createMessage(message: _response.responsePrimary![1].urls!._regular!)
        imageHolderDashboard.kf.setImage(with: URL.init(string: _response.responsePrimary![1].urls!._regular ?? ""))
        
        for dataResponse in _response.responsePrimary! {
            self.dsTableView.modelImages.append(dataResponse.urls!._small!)
        }
        
        self.tableView.reloadData()
    }
}

extension DashboardViewController : UITableViewDelegate , UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.dsTableView.modelImages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let nib = UINib.init(nibName: "DashboardImageTableViewCell", bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: "imageCell")
        let cell = tableView.dequeueReusableCell(withIdentifier: "imageCell") as? DashboardImageTableViewCell
        cell?.imageCell.kf.setImage(with: URL.init(string: self.dsTableView.modelImages[indexPath.row])!)
        "table view initial".createMessage(message: "initial")
        return cell!
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        self.viewConstraintValue.constant = CGFloat(500 * self.dsTableView.modelImages.count) - UIScreen.main.bounds.height / 2 
        return 500.0
    }
    
}
